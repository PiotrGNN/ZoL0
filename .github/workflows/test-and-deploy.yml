name: Test and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run unit tests
      run: |
        python run_tests.py unit --coverage
        
    - name: Run integration tests
      if: github.event_name != 'pull_request'
      env:
        BYBIT_TEST_API_KEY: ${{ secrets.BYBIT_TEST_API_KEY }}
        BYBIT_TEST_API_SECRET: ${{ secrets.BYBIT_TEST_API_SECRET }}
      run: |
        python run_tests.py integration
        
    - name: Run performance tests
      if: github.event_name != 'pull_request'
      run: |
        python run_tests.py performance --html
        
    - name: Upload test reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-reports
        path: test-reports/
        
    - name: Upload coverage reports
      if: always()
      uses: codecov/codecov-action@v3
      
  benchmark:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run benchmarks
      run: |
        python run_tests.py performance --durations=20
        
    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        name: Python Benchmarks
        tool: 'pytest'
        output-file-path: test-reports/pytest-benchmark.json
        
  deploy-testnet:
    needs: [test, benchmark]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Build and push Docker image
      run: |
        docker build -t trading-system:${{ github.sha }} .
        docker tag trading-system:${{ github.sha }} ${{ secrets.ECR_REGISTRY }}/trading-system:testnet
        docker push ${{ secrets.ECR_REGISTRY }}/trading-system:testnet
        
    - name: Deploy to EKS testnet
      run: |
        aws eks update-kubeconfig --name trading-testnet-cluster
        kubectl apply -f k8s/testnet/
        kubectl set image deployment/trading-system trading-system=${{ secrets.ECR_REGISTRY }}/trading-system:testnet
        
  deploy-production:
    needs: [test, benchmark]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Build and push Docker image
      run: |
        docker build -t trading-system:${{ github.sha }} .
        docker tag trading-system:${{ github.sha }} ${{ secrets.ECR_REGISTRY }}/trading-system:latest
        docker push ${{ secrets.ECR_REGISTRY }}/trading-system:latest
        
    - name: Deploy to EKS production
      run: |
        aws eks update-kubeconfig --name trading-prod-cluster
        kubectl apply -f k8s/production/
        kubectl set image deployment/trading-system trading-system=${{ secrets.ECR_REGISTRY }}/trading-system:latest
        
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/trading-system
        kubectl get pods -l app=trading-system