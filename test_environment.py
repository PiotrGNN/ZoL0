
"""
test_environment.py
------------------
Skrypt do testowania ≈õrodowiska i dostƒôpno≈õci wymaganych bibliotek.
"""

import sys
import importlib
import os
from typing import List, Dict

def check_required_libs() -> Dict[str, bool]:
    """
    Sprawdza dostƒôpno≈õƒá wymaganych bibliotek.
    
    Returns:
        Dict[str, bool]: S≈Çownik nazw bibliotek i status√≥w dostƒôpno≈õci
    """
    required_libs = [
        "numpy", "pandas", "sklearn", "xgboost", 
        "matplotlib", "flask", "dotenv", "tensorflow"
    ]
    results = {}
    
    for lib in required_libs:
        try:
            importlib.import_module(lib)
            results[lib] = True
            print(f"‚úÖ Biblioteka {lib} jest dostƒôpna")
        except ImportError:
            results[lib] = False
            print(f"‚ùå Biblioteka {lib} NIE jest dostƒôpna")
    
    return results

def check_ai_models() -> Dict[str, bool]:
    """
    Sprawdza dostƒôpno≈õƒá modeli AI.
    
    Returns:
        Dict[str, bool]: S≈Çownik nazw modeli i status√≥w dostƒôpno≈õci
    """
    ai_models = [
        "SentimentAnalyzer", "AnomalyDetector", "ModelRecognizer"
    ]
    results = {}
    
    try:
        import ai_models
        
        for model_name in ai_models:
            try:
                # Sprawd≈∫ czy model jest dostƒôpny w available_models
                if hasattr(ai_models, 'get_available_models'):
                    available = ai_models.get_available_models()
                    model_key = model_name.lower().replace('analyzer', '_analyzer').replace('detector', '_detector').replace('recognizer', '_recognizer')
                    
                    if model_key in available:
                        results[model_name] = True
                        print(f"‚úÖ Model {model_name} jest dostƒôpny")
                    else:
                        # Spr√≥buj bezpo≈õredni import
                        try:
                            module_name = model_name.lower()
                            if 'analyzer' in module_name:
                                from ai_models.sentiment_ai import SentimentAnalyzer
                                results[model_name] = True
                                print(f"‚úÖ Model {model_name} jest dostƒôpny (bezpo≈õredni import)")
                            elif 'detector' in module_name:
                                from ai_models.anomaly_detection import AnomalyDetector
                                results[model_name] = True
                                print(f"‚úÖ Model {model_name} jest dostƒôpny (bezpo≈õredni import)")
                            elif 'recognizer' in module_name:
                                from ai_models.model_recognition import ModelRecognizer
                                results[model_name] = True
                                print(f"‚úÖ Model {model_name} jest dostƒôpny (bezpo≈õredni import)")
                            else:
                                results[model_name] = False
                                print(f"‚ùå Model {model_name} NIE jest dostƒôpny")
                        except ImportError:
                            results[model_name] = False
                            print(f"‚ùå Model {model_name} NIE jest dostƒôpny")
                else:
                    # Je≈õli get_available_models() nie istnieje
                    results[model_name] = False
                    print(f"‚ùì Nie mo≈ºna sprawdziƒá dostƒôpno≈õci modelu {model_name}")
            except Exception as e:
                results[model_name] = False
                print(f"‚ùå B≈ÇƒÖd podczas sprawdzania modelu {model_name}: {e}")
    except ImportError:
        print("‚ùå Nie mo≈ºna zaimportowaƒá pakietu ai_models")
        for model_name in ai_models:
            results[model_name] = False
    
    return results

def check_model_methods():
    """
    Sprawdza dostƒôpno≈õƒá metod fit() i predict() w modelach.
    """
    print("\nüìä Sprawdzanie metod w modelach AI:")
    
    try:
        # SentimentAnalyzer
        try:
            from ai_models.sentiment_ai import SentimentAnalyzer
            model = SentimentAnalyzer()
            has_predict = hasattr(model, 'predict')
            has_fit = hasattr(model, 'fit')
            print(f"SentimentAnalyzer: predict={has_predict}, fit={has_fit}")
            
            # Test predict
            if has_predict:
                result = model.predict("Markets look promising today")
                print(f"  - Test predict(): {result['analysis'] if isinstance(result, dict) and 'analysis' in result else 'B≈ÇƒÖd'}")
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd podczas testowania SentimentAnalyzer: {e}")
        
        # AnomalyDetector
        try:
            from ai_models.anomaly_detection import AnomalyDetector
            model = AnomalyDetector()
            has_predict = hasattr(model, 'predict')
            has_fit = hasattr(model, 'fit')
            print(f"AnomalyDetector: predict={has_predict}, fit={has_fit}")
            
            # Test detect
            test_data = [{"value": 1.0}, {"value": 2.0}, {"value": 100.0}]
            result = model.detect(test_data)
            print(f"  - Test detect(): {len(result)} anomalii wykrytych")
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd podczas testowania AnomalyDetector: {e}")
        
        # ModelRecognizer
        try:
            from ai_models.model_recognition import ModelRecognizer
            model = ModelRecognizer()
            has_predict = hasattr(model, 'predict')
            has_fit = hasattr(model, 'fit')
            print(f"ModelRecognizer: predict={has_predict}, fit={has_fit}")
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd podczas testowania ModelRecognizer: {e}")
    
    except Exception as e:
        print(f"‚ùå Og√≥lny b≈ÇƒÖd podczas testowania metod: {e}")

def main():
    """
    G≈Ç√≥wna funkcja testujƒÖca ≈õrodowisko.
    """
    print("üîç Sprawdzanie ≈õrodowiska Python...")
    print(f"Python: {sys.version}")
    print(f"≈öcie≈ºka wykonywalna: {sys.executable}")
    print(f"Katalog bie≈ºƒÖcy: {os.getcwd()}")
    
    print("\nüìö Sprawdzanie wymaganych bibliotek...")
    lib_results = check_required_libs()
    
    print("\nü§ñ Sprawdzanie dostƒôpno≈õci modeli AI...")
    model_results = check_ai_models()
    
    # Sprawdzenie metod w modelach
    check_model_methods()
    
    # Podsumowanie
    print("\nüìã Podsumowanie:")
    libs_ok = all(lib_results.values())
    models_ok = all(model_results.values())
    
    if libs_ok:
        print("‚úÖ Wszystkie wymagane biblioteki sƒÖ dostƒôpne")
    else:
        print("‚ö†Ô∏è Brakuje niekt√≥rych bibliotek!")
        for lib, available in lib_results.items():
            if not available:
                print(f"  - {lib}")
    
    if models_ok:
        print("‚úÖ Wszystkie modele AI sƒÖ dostƒôpne")
    else:
        print("‚ö†Ô∏è Brakuje niekt√≥rych modeli AI!")
        for model, available in model_results.items():
            if not available:
                print(f"  - {model}")
    
    # Wypisanie statystyk, je≈õli istniejƒÖ
    if 'stats' in locals():
        print("\nüìä Statystyki:")
        if 'py_files_scanned' in stats:
            print(f"- Przeskanowano plik√≥w .py: {stats['py_files_scanned']}")
        else:
            print("- Brak danych o liczbie przeskanowanych plik√≥w .py")
    
    if libs_ok and models_ok:
        print("\nüéâ ≈örodowisko jest gotowe do pracy!")
        returnn 0
    else:
        print("\n‚ö†Ô∏è ≈örodowisko wymaga konfiguracji!")
        return 1

if __name__ == "__main__":
    sys.exit(main())
