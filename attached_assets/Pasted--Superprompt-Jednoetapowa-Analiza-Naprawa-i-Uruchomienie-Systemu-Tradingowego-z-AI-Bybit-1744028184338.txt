## 🤖🛠️ Superprompt: Jednoetapowa Analiza, Naprawa i Uruchomienie Systemu Tradingowego z AI + Bybit API (Replit-ready, Production-grade)

### 🎯 Cel:
W **jednym przebiegu**:
1. Przeanalizuj cały system tradingowy z AI.
2. Sprawdź i napraw integrację z **Bybit API** (REST/WebSocket).
3. Zweryfikuj przepływ danych i logikę decyzji.
4. Napraw wszystkie błędy i nieoptymalne fragmenty.
5. Uruchom system automatycznie w środowisku **Replit**.

---

### ✅ Co należy zrobić:

#### 1. 🔍 **Sprawdzenie kodu i struktury projektu**:
- Zidentyfikuj błędy składni, importów, brakujące zależności i nieprawidłową strukturę folderów.
- Popraw nieczytelne lub mylące nazwy zmiennych, funkcji i modułów.
- Usuń zbędny, nieużywany lub zduplikowany kod.

#### 2. 🔐 **Weryfikacja połączenia z Bybit API (REST/WebSocket)**:
- Sprawdź poprawność autoryzacji (API Key + Secret z `.env` lub **Replit Secrets Manager**).
- Upewnij się, że wszystkie endpointy (saldo, tickery, order book, zlecenia) działają.
- Przetestuj łączność z testnetem i (opcjonalnie) środowiskiem produkcyjnym.

#### 3. 🧠 **Integracja i test AI**:
- Zweryfikuj, że model AI poprawnie przetwarza dane rynkowe i generuje sygnały (BUY/SELL/HOLD).
- Sprawdź cały pipeline:
  `market_data → AI → decision → trading_logic → zlecenie API → potwierdzenie → log → AI feedback`
- Przetestuj reakcję systemu na fałszywe sygnały AI (mock) w celach testowych.

#### 4. 🧪 **Symulacja i testy działania**:
- Przeprowadź testowe zlecenia na Bybit testnet.
- Zadbaj o logowanie każdego kroku (decyzja AI, zlecenie, odpowiedź API).
- Dodaj mechanizm fallback w razie błędu modelu lub utraty połączenia z API.

#### 5. 🛠️ **Automatyczna naprawa i optymalizacja**:
- Napraw wszystkie znalezione błędy.
- Uprość i zoptymalizuj kod pod kątem wydajności i stabilności.
- Zastosuj dobre praktyki (modularność, obsługa wyjątków, DRY, typowanie).

#### 6. ⚙️ **Środowisko i konfiguracja Replit**:
- Wygeneruj lub popraw pliki:
  - `requirements.txt` (wszystkie zależności: `pybit`, `pandas`, `torch`/`tensorflow`, `websocket-client`, itp.),
  - `.replit` (`run = "python main.py"`),
  - `replit.nix`, jeśli wymagane są niestandardowe pakiety systemowe.
- Upewnij się, że klucze API i konfiguracje są ładowane bezpiecznie.
- Projekt musi działać automatycznie po kliknięciu **Run** na Replit.

---

### 📦 Efekt końcowy:

- ✅ Gotowy, uruchomiony i przetestowany system tradingowy z AI.
- 🔄 Sprawna i bezpieczna komunikacja z Bybit API (w trybie testowym lub realnym).
- 📊 Efektywna integracja AI z logiką transakcyjną.
- ⚡ System stabilny, odporny, zoptymalizowany.
- 🔐 Środowisko w pełni bezpieczne i gotowe na produkcję / dalszy rozwój.

---

### ✅ Lista kontrolna (AI + API + Replit + Uruchomienie):

- [ ] Kod uruchamia się bez błędów?
- [ ] Czy wszystkie zależności są zainstalowane?
- [ ] Czy AI generuje poprawne decyzje handlowe?
- [ ] Czy system poprawnie reaguje na sygnały AI i składa zlecenia przez Bybit API?
- [ ] Czy środowisko Replit jest poprawnie skonfigurowane i automatyczne?
- [ ] Czy występuje pełne logowanie i obsługa błędów?

---

🔁 **Wykonaj całość jako jedno zintegrowane zadanie: sprawdź → napraw → uruchom → potwierdź poprawne działanie systemu AI + Bybit na Replit.**
