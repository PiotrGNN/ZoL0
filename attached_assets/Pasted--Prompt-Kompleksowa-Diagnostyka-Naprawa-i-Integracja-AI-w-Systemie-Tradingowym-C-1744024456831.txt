## 🤖🛠️ Prompt: Kompleksowa Diagnostyka, Naprawa i Integracja AI w Systemie Tradingowym

### 🎯 Cel:
Dokładnie przeanalizuj cały system tradingowy – w tym wszystkie moduły oparte na sztucznej inteligencji – w celu wykrycia błędów, naprawy nieprawidłowości, zoptymalizowania wydajności oraz zapewnienia stabilnego, inteligentnego i przewidywalnego działania.

---

### ✅ Zakres analizy i działań:

#### 1. **Diagnostyka systemu tradingowego**:
- Zidentyfikuj błędy wykonania (runtime), importów, zależności i złej logiki.
- Sprawdź poprawność działania strategii, sygnałów wejścia/wyjścia, warunków otwarcia/zamknięcia pozycji.
- Przeanalizuj, czy logika zarządzania kapitałem i ryzykiem jest zgodna z założeniami.

#### 2. **Moduły AI/ML**:
- Zweryfikuj modele AI (np. LSTM, XGBoost, CNN, transformers) pod kątem:
  - poprawności trenowania, testowania i predykcji,
  - jakości danych wejściowych (feature engineering),
  - skuteczności prognoz (np. precision, recall, Sharpe ratio),
  - nadmiernego dopasowania (overfitting).
- Przeanalizuj pipeline uczenia maszynowego: dane → preprocessing → model → predykcja.
- Upewnij się, że modele są odpowiednio serializowane (np. `joblib`, `pickle`, `onnx`) i używane w czasie rzeczywistym.

#### 3. **Struktura projektu i optymalizacja kodu**:
- Uporządkuj moduły, nazwy plików, funkcji i klas.
- Usuń zbędny lub zduplikowany kod.
- Zastosuj dobre praktyki inżynierii oprogramowania (modularność, SOLID, DRY).

#### 4. **Wydajność, stabilność i odporność systemu**:
- Zidentyfikuj i usuń wąskie gardła (np. zbyt wolne zapytania, pętle, operacje na dużych zbiorach danych).
- Upewnij się, że system obsługuje wyjątki, błędy API, brak internetu i zmienność rynkową.
- Przeanalizuj logikę reconnectów, timeoutów i automatycznego restartu.

#### 5. **Zarządzanie zależnościami i konfiguracją**:
- Uzupełnij i uporządkuj:
  - `requirements.txt` lub `environment.yml` (z bibliotekami: `ccxt`, `pandas`, `numpy`, `scikit-learn`, `tensorflow`, `torch`, itp.),
  - pliki konfiguracyjne (`config.json`, `.env`, `.replit`, `replit.nix`),
  - logger i śledzenie błędów (`logging`, `sentry`, itp.).

#### 6. **Testowanie i dokumentacja**:
- Uruchom i/lub dodaj testy jednostkowe i integracyjne (`pytest`, `unittest`).
- Przeprowadź backtesty i symulacje real-time.
- Dodaj README z opisem działania, strukturą kodu i instrukcją uruchomienia.

---

### 📦 Oczekiwany rezultat:

- Naprawiony, zoptymalizowany i czytelnie udokumentowany system tradingowy.
- Sprawnie działające moduły AI z poprawną logiką predykcyjną.
- Ustandaryzowana struktura projektu, gotowa do wdrożenia lub rozwoju.
- Skonfigurowane środowisko i zależności.

---

### 🧠 Lista kontrolna:

- [ ] Czy modele AI poprawnie uczą się, przewidują i są testowane?
- [ ] Czy dane wejściowe są właściwie przygotowane i przefiltrowane?
- [ ] Czy system działa bezbłędnie i reaguje na problemy środowiskowe (API, sieć, limity)?
- [ ] Czy zależności i środowisko są gotowe do uruchomienia w Replit lub produkcyjnie?
- [ ] Czy kod jest zoptymalizowany, modularny i dobrze udokumentowany?

---
