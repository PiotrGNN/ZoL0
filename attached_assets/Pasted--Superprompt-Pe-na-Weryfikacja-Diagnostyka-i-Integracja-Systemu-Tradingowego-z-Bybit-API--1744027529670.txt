## 🔗🤖 Superprompt: Pełna Weryfikacja, Diagnostyka i Integracja Systemu Tradingowego z Bybit API + AI (Replit-ready, Production-grade)

### 🎯 Cel:
Przeanalizuj i zoptymalizuj cały system tradingowy, w tym:
- połączenie z **Bybit API** (REST + WebSocket),
- integrację z modułami **AI/ML** generującymi sygnały,
- bezpieczeństwo, odporność i stabilność systemu w środowisku **Replit**.

Wykryj i napraw wszystkie błędy, zapewnij odporność na awarie oraz gotowość do działania w trybie testowym i produkcyjnym.

---

### ✅ Zakres działań:

#### 1. 🔐 Autoryzacja i połączenie z API:
- Zweryfikuj poprawność ładowania kluczy API z `.env`, `config.json` lub najlepiej: **Replit Secrets Manager** (`Tools → Secrets`).
- Upewnij się, że autoryzacja działa bezbłędnie.
- Usuń wszelkie hardcodowane dane wrażliwe.

#### 2. 🔄 Endpointy REST / WebSocket i komunikacja:
- Sprawdź, czy wykorzystywane endpointy REST i WebSocket są:
  - aktualne (zgodne z dokumentacją Bybit),
  - odpowiednio wykorzystywane (tickery, saldo, pozycje, order book, zlecenia),
  - obsługiwane z automatycznym reconnectem po rozłączeniu.
- Zaimplementuj:
  - retry dla timeoutów i błędów po stronie API,
  - obsługę rate limitów (np. kolejki lub opóźnienia).

#### 3. 🧠 Integracja AI z Bybit API – pełna ścieżka decyzyjna:
- Upewnij się, że moduły AI generują sygnały (BUY / SELL / HOLD lub wartości prawdopodobieństwa).
- Zweryfikuj, że dane rynkowe trafiają do AI i predykcje są:
  - przekazywane do logiki tradingowej,
  - konwertowane na zlecenia API z poprawnymi parametrami (symbol, ilość, side, TP/SL, typ zlecenia).
- Sprawdź pełną ścieżkę danych:  
  `market_data → AI model → decision → trade logic → API → zlecenie → status → log → AI feedback loop (jeśli istnieje)`

#### 4. 📊 Ewaluacja AI (opcjonalnie):
- Dodaj możliwość logowania skuteczności predykcji (np. Precision, Recall, PnL).
- Zaimplementuj testowe sygnały (mock AI), by testować integrację niezależnie od predykcji.

#### 5. 📈 Logika zleceń i kontrola ryzyka:
- Sprawdź poprawność:
  - typów zleceń (market, limit, stop),
  - parametrów (reduce-only, post-only, TP, SL),
  - zgodność z wymaganiami minimalnych kontraktów.
- Zaimplementuj limity ryzyka (maks. strata, maks. pozycja, maks. dźwignia).
- Zadbaj o odporność na błędne zlecenia i nieprzewidziane dane wejściowe.

#### 6. ⚠️ Obsługa błędów i monitorowanie:
- Loguj odpowiedzi API, błędy, retry i statusy zleceń.
- Obsłuż błędy Bybit API (`10006`, `10005`, `30013` itd.).
- Zadbaj, by system raportował błędy, ale nie przerywał działania.

#### 7. 🧪 Tryb testowy i separacja środowisk:
- Oddziel środowisko produkcyjne i testowe (testnet Bybit).
- Dodaj flagę środowiska (`TEST_MODE = True/False`) w konfiguracji.

#### 8. ⚙️ Środowisko i konfiguracja (Replit-ready):
- Upewnij się, że wszystkie dane są ładowane z `.env` lub Secrets Managera.
- W `requirements.txt` dodaj wszystkie niezbędne biblioteki:
  - `pybit`, `websocket-client`, `requests`, `pandas`, `numpy`, `scikit-learn`, `torch`/`tensorflow`, itp.
- Dodaj pliki:
  - `.replit` z `run = "python main.py"` lub innym poleceniem startowym,
  - `replit.nix`, jeśli potrzebne są niestandardowe zależności systemowe (np. `ta-lib`).

#### 9. 🔁 Fallback i odporność:
- Dodaj mechanizm awaryjny (np. domyślna logika w razie braku sygnału AI).
- (Opcjonalnie) skonfiguruj backup API (np. Binance) jako awaryjne źródło danych/zleceń.

---

### 📦 Oczekiwany rezultat:

- Stabilna, bezpieczna i w pełni zautomatyzowana integracja z Bybit API (REST/WebSocket).
- System płynnie współpracujący z modułem AI predykcyjnym.
- Odporność na błędy, reconnecty i przekroczenia limitów.
- Gotowość do działania zarówno w testnecie, jak i na rynku rzeczywistym.
- Projekt w pełni uruchamialny i edytowalny w środowisku **Replit**.

---

### ✅ Lista kontrolna (AI + API + Replit):

- [ ] Czy system działa natychmiast po kliknięciu „Run” na Replit?
- [ ] Czy połączenie z Bybit (testnet/real) działa bezbłędnie?
- [ ] Czy AI generuje i przekazuje decyzje handlowe poprawnie?
- [ ] Czy każde zlecenie API jest zgodne z predykcją i parametrami?
- [ ] Czy system poprawnie loguje i radzi sobie z błędami i wyjątkami?
- [ ] Czy środowisko jest bezpieczne (bez widocznych kluczy), stabilne i modularne?

---

🔁 **Zastosuj cały prompt w jednym przebiegu. Sprawdź, napraw, zautomatyzuj i przygotuj projekt do działania 24/7 z AI i Bybit na Replit.**
